// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.1.0
// - protoc             v3.18.1
// source: cells-docstore.proto

package docstore

import (
	context "context"
	fmt "fmt"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	metadata "google.golang.org/grpc/metadata"
	status "google.golang.org/grpc/status"
	sync "sync"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

var (
	enhancedDocStoreServers     = make(map[string]DocStoreEnhancedServer)
	enhancedDocStoreServersLock = sync.RWMutex{}
)

type NamedDocStoreServer interface {
	DocStoreServer
	Name() string
}
type DocStoreEnhancedServer map[string]NamedDocStoreServer

func (m DocStoreEnhancedServer) PutDocument(ctx context.Context, r *PutDocumentRequest) (*PutDocumentResponse, error) {
	md, ok := metadata.FromIncomingContext(ctx)
	if !ok || len(md.Get("targetname")) == 0 {
		return nil, status.Errorf(codes.FailedPrecondition, "method PutDocument should have a context")
	}
	enhancedDocStoreServersLock.RLock()
	defer enhancedDocStoreServersLock.RUnlock()
	for _, mm := range m {
		if mm.Name() == md.Get("targetname")[0] {
			return mm.PutDocument(ctx, r)
		}
	}
	return nil, status.Errorf(codes.Unimplemented, "method PutDocument not implemented")
}

func (m DocStoreEnhancedServer) GetDocument(ctx context.Context, r *GetDocumentRequest) (*GetDocumentResponse, error) {
	md, ok := metadata.FromIncomingContext(ctx)
	if !ok || len(md.Get("targetname")) == 0 {
		return nil, status.Errorf(codes.FailedPrecondition, "method GetDocument should have a context")
	}
	enhancedDocStoreServersLock.RLock()
	defer enhancedDocStoreServersLock.RUnlock()
	for _, mm := range m {
		if mm.Name() == md.Get("targetname")[0] {
			return mm.GetDocument(ctx, r)
		}
	}
	return nil, status.Errorf(codes.Unimplemented, "method GetDocument not implemented")
}

func (m DocStoreEnhancedServer) DeleteDocuments(ctx context.Context, r *DeleteDocumentsRequest) (*DeleteDocumentsResponse, error) {
	md, ok := metadata.FromIncomingContext(ctx)
	if !ok || len(md.Get("targetname")) == 0 {
		return nil, status.Errorf(codes.FailedPrecondition, "method DeleteDocuments should have a context")
	}
	enhancedDocStoreServersLock.RLock()
	defer enhancedDocStoreServersLock.RUnlock()
	for _, mm := range m {
		if mm.Name() == md.Get("targetname")[0] {
			return mm.DeleteDocuments(ctx, r)
		}
	}
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDocuments not implemented")
}

func (m DocStoreEnhancedServer) CountDocuments(ctx context.Context, r *ListDocumentsRequest) (*CountDocumentsResponse, error) {
	md, ok := metadata.FromIncomingContext(ctx)
	if !ok || len(md.Get("targetname")) == 0 {
		return nil, status.Errorf(codes.FailedPrecondition, "method CountDocuments should have a context")
	}
	enhancedDocStoreServersLock.RLock()
	defer enhancedDocStoreServersLock.RUnlock()
	for _, mm := range m {
		if mm.Name() == md.Get("targetname")[0] {
			return mm.CountDocuments(ctx, r)
		}
	}
	return nil, status.Errorf(codes.Unimplemented, "method CountDocuments not implemented")
}

func (m DocStoreEnhancedServer) ListDocuments(r *ListDocumentsRequest, s DocStore_ListDocumentsServer) error {
	md, ok := metadata.FromIncomingContext(s.Context())
	if !ok || len(md.Get("targetname")) == 0 {
		return status.Errorf(codes.FailedPrecondition, "method ListDocuments should have a context")
	}
	enhancedDocStoreServersLock.RLock()
	defer enhancedDocStoreServersLock.RUnlock()
	for _, mm := range m {
		if mm.Name() == md.Get("targetname")[0] {
			return mm.ListDocuments(r, s)
		}
	}
	return status.Errorf(codes.Unimplemented, "method ListDocuments not implemented")
}
func (m DocStoreEnhancedServer) mustEmbedUnimplementedDocStoreServer() {}
func RegisterDocStoreEnhancedServer(s grpc.ServiceRegistrar, srv NamedDocStoreServer) {
	enhancedDocStoreServersLock.Lock()
	defer enhancedDocStoreServersLock.Unlock()
	addr := fmt.Sprintf("%p", s)
	m, ok := enhancedDocStoreServers[addr]
	if !ok {
		m = DocStoreEnhancedServer{}
		enhancedDocStoreServers[addr] = m
		RegisterDocStoreServer(s, m)
	}
	m[srv.Name()] = srv
}
func DeregisterDocStoreEnhancedServer(s grpc.ServiceRegistrar, name string) {
	enhancedDocStoreServersLock.Lock()
	defer enhancedDocStoreServersLock.Unlock()
	addr := fmt.Sprintf("%p", s)
	m, ok := enhancedDocStoreServers[addr]
	if !ok {
		return
	}
	delete(m, name)
}
