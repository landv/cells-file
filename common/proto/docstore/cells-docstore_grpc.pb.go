// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package docstore

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DocStoreClient is the client API for DocStore service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DocStoreClient interface {
	PutDocument(ctx context.Context, in *PutDocumentRequest, opts ...grpc.CallOption) (*PutDocumentResponse, error)
	GetDocument(ctx context.Context, in *GetDocumentRequest, opts ...grpc.CallOption) (*GetDocumentResponse, error)
	DeleteDocuments(ctx context.Context, in *DeleteDocumentsRequest, opts ...grpc.CallOption) (*DeleteDocumentsResponse, error)
	CountDocuments(ctx context.Context, in *ListDocumentsRequest, opts ...grpc.CallOption) (*CountDocumentsResponse, error)
	ListDocuments(ctx context.Context, in *ListDocumentsRequest, opts ...grpc.CallOption) (DocStore_ListDocumentsClient, error)
}

type docStoreClient struct {
	cc grpc.ClientConnInterface
}

func NewDocStoreClient(cc grpc.ClientConnInterface) DocStoreClient {
	return &docStoreClient{cc}
}

func (c *docStoreClient) PutDocument(ctx context.Context, in *PutDocumentRequest, opts ...grpc.CallOption) (*PutDocumentResponse, error) {
	out := new(PutDocumentResponse)
	err := c.cc.Invoke(ctx, "/docstore.DocStore/PutDocument", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *docStoreClient) GetDocument(ctx context.Context, in *GetDocumentRequest, opts ...grpc.CallOption) (*GetDocumentResponse, error) {
	out := new(GetDocumentResponse)
	err := c.cc.Invoke(ctx, "/docstore.DocStore/GetDocument", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *docStoreClient) DeleteDocuments(ctx context.Context, in *DeleteDocumentsRequest, opts ...grpc.CallOption) (*DeleteDocumentsResponse, error) {
	out := new(DeleteDocumentsResponse)
	err := c.cc.Invoke(ctx, "/docstore.DocStore/DeleteDocuments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *docStoreClient) CountDocuments(ctx context.Context, in *ListDocumentsRequest, opts ...grpc.CallOption) (*CountDocumentsResponse, error) {
	out := new(CountDocumentsResponse)
	err := c.cc.Invoke(ctx, "/docstore.DocStore/CountDocuments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *docStoreClient) ListDocuments(ctx context.Context, in *ListDocumentsRequest, opts ...grpc.CallOption) (DocStore_ListDocumentsClient, error) {
	stream, err := c.cc.NewStream(ctx, &DocStore_ServiceDesc.Streams[0], "/docstore.DocStore/ListDocuments", opts...)
	if err != nil {
		return nil, err
	}
	x := &docStoreListDocumentsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DocStore_ListDocumentsClient interface {
	Recv() (*ListDocumentsResponse, error)
	grpc.ClientStream
}

type docStoreListDocumentsClient struct {
	grpc.ClientStream
}

func (x *docStoreListDocumentsClient) Recv() (*ListDocumentsResponse, error) {
	m := new(ListDocumentsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// DocStoreServer is the server API for DocStore service.
// All implementations must embed UnimplementedDocStoreServer
// for forward compatibility
type DocStoreServer interface {
	PutDocument(context.Context, *PutDocumentRequest) (*PutDocumentResponse, error)
	GetDocument(context.Context, *GetDocumentRequest) (*GetDocumentResponse, error)
	DeleteDocuments(context.Context, *DeleteDocumentsRequest) (*DeleteDocumentsResponse, error)
	CountDocuments(context.Context, *ListDocumentsRequest) (*CountDocumentsResponse, error)
	ListDocuments(*ListDocumentsRequest, DocStore_ListDocumentsServer) error
	mustEmbedUnimplementedDocStoreServer()
}

// UnimplementedDocStoreServer must be embedded to have forward compatible implementations.
type UnimplementedDocStoreServer struct {
}

func (UnimplementedDocStoreServer) PutDocument(context.Context, *PutDocumentRequest) (*PutDocumentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutDocument not implemented")
}
func (UnimplementedDocStoreServer) GetDocument(context.Context, *GetDocumentRequest) (*GetDocumentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDocument not implemented")
}
func (UnimplementedDocStoreServer) DeleteDocuments(context.Context, *DeleteDocumentsRequest) (*DeleteDocumentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDocuments not implemented")
}
func (UnimplementedDocStoreServer) CountDocuments(context.Context, *ListDocumentsRequest) (*CountDocumentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountDocuments not implemented")
}
func (UnimplementedDocStoreServer) ListDocuments(*ListDocumentsRequest, DocStore_ListDocumentsServer) error {
	return status.Errorf(codes.Unimplemented, "method ListDocuments not implemented")
}
func (UnimplementedDocStoreServer) mustEmbedUnimplementedDocStoreServer() {}

// UnsafeDocStoreServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DocStoreServer will
// result in compilation errors.
type UnsafeDocStoreServer interface {
	mustEmbedUnimplementedDocStoreServer()
}

func RegisterDocStoreServer(s grpc.ServiceRegistrar, srv DocStoreServer) {
	s.RegisterService(&DocStore_ServiceDesc, srv)
}

func _DocStore_PutDocument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutDocumentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocStoreServer).PutDocument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/docstore.DocStore/PutDocument",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocStoreServer).PutDocument(ctx, req.(*PutDocumentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DocStore_GetDocument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDocumentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocStoreServer).GetDocument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/docstore.DocStore/GetDocument",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocStoreServer).GetDocument(ctx, req.(*GetDocumentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DocStore_DeleteDocuments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDocumentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocStoreServer).DeleteDocuments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/docstore.DocStore/DeleteDocuments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocStoreServer).DeleteDocuments(ctx, req.(*DeleteDocumentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DocStore_CountDocuments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDocumentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocStoreServer).CountDocuments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/docstore.DocStore/CountDocuments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocStoreServer).CountDocuments(ctx, req.(*ListDocumentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DocStore_ListDocuments_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListDocumentsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DocStoreServer).ListDocuments(m, &docStoreListDocumentsServer{stream})
}

type DocStore_ListDocumentsServer interface {
	Send(*ListDocumentsResponse) error
	grpc.ServerStream
}

type docStoreListDocumentsServer struct {
	grpc.ServerStream
}

func (x *docStoreListDocumentsServer) Send(m *ListDocumentsResponse) error {
	return x.ServerStream.SendMsg(m)
}

// DocStore_ServiceDesc is the grpc.ServiceDesc for DocStore service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DocStore_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "docstore.DocStore",
	HandlerType: (*DocStoreServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PutDocument",
			Handler:    _DocStore_PutDocument_Handler,
		},
		{
			MethodName: "GetDocument",
			Handler:    _DocStore_GetDocument_Handler,
		},
		{
			MethodName: "DeleteDocuments",
			Handler:    _DocStore_DeleteDocuments_Handler,
		},
		{
			MethodName: "CountDocuments",
			Handler:    _DocStore_CountDocuments_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListDocuments",
			Handler:       _DocStore_ListDocuments_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "cells-docstore.proto",
}
