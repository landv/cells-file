// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.1.0
// - protoc             v3.18.1
// source: cells-message.proto

package broker

import (
	fmt "fmt"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	metadata "google.golang.org/grpc/metadata"
	status "google.golang.org/grpc/status"
	sync "sync"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

var (
	enhancedBrokerServers     = make(map[string]BrokerEnhancedServer)
	enhancedBrokerServersLock = sync.RWMutex{}
)

type NamedBrokerServer interface {
	BrokerServer
	Name() string
}
type BrokerEnhancedServer map[string]NamedBrokerServer

func (m BrokerEnhancedServer) Publish(s Broker_PublishServer) error {
	md, ok := metadata.FromIncomingContext(s.Context())
	if !ok || len(md.Get("targetname")) == 0 {
		return status.Errorf(codes.FailedPrecondition, "method Publish should have a context")
	}
	enhancedBrokerServersLock.RLock()
	defer enhancedBrokerServersLock.RUnlock()
	for _, mm := range m {
		if mm.Name() == md.Get("targetname")[0] {
			return mm.Publish(s)
		}
	}
	return status.Errorf(codes.Unimplemented, "method Publish not implemented")
}

func (m BrokerEnhancedServer) Subscribe(s Broker_SubscribeServer) error {
	md, ok := metadata.FromIncomingContext(s.Context())
	if !ok || len(md.Get("targetname")) == 0 {
		return status.Errorf(codes.FailedPrecondition, "method Subscribe should have a context")
	}
	enhancedBrokerServersLock.RLock()
	defer enhancedBrokerServersLock.RUnlock()
	for _, mm := range m {
		if mm.Name() == md.Get("targetname")[0] {
			return mm.Subscribe(s)
		}
	}
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (m BrokerEnhancedServer) mustEmbedUnimplementedBrokerServer() {}
func RegisterBrokerEnhancedServer(s grpc.ServiceRegistrar, srv NamedBrokerServer) {
	enhancedBrokerServersLock.Lock()
	defer enhancedBrokerServersLock.Unlock()
	addr := fmt.Sprintf("%p", s)
	m, ok := enhancedBrokerServers[addr]
	if !ok {
		m = BrokerEnhancedServer{}
		enhancedBrokerServers[addr] = m
		RegisterBrokerServer(s, m)
	}
	m[srv.Name()] = srv
}
func DeregisterBrokerEnhancedServer(s grpc.ServiceRegistrar, name string) {
	enhancedBrokerServersLock.Lock()
	defer enhancedBrokerServersLock.Unlock()
	addr := fmt.Sprintf("%p", s)
	m, ok := enhancedBrokerServers[addr]
	if !ok {
		return
	}
	delete(m, name)
}
