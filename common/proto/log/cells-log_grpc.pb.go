// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package log

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LogRecorderClient is the client API for LogRecorder service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LogRecorderClient interface {
	// PutLog adds received log messages to the corresponding log repository.
	PutLog(ctx context.Context, opts ...grpc.CallOption) (LogRecorder_PutLogClient, error)
	// ListLogs performs a paginated search query in the log repository.
	ListLogs(ctx context.Context, in *ListLogRequest, opts ...grpc.CallOption) (LogRecorder_ListLogsClient, error)
	// DeleteLogs deletes logs based on a request (cannot be empty)
	DeleteLogs(ctx context.Context, in *ListLogRequest, opts ...grpc.CallOption) (*DeleteLogsResponse, error)
	// AggregatedLogs performs a query to retrieve log events of the given type, faceted by time range.
	AggregatedLogs(ctx context.Context, in *TimeRangeRequest, opts ...grpc.CallOption) (LogRecorder_AggregatedLogsClient, error)
}

type logRecorderClient struct {
	cc grpc.ClientConnInterface
}

func NewLogRecorderClient(cc grpc.ClientConnInterface) LogRecorderClient {
	return &logRecorderClient{cc}
}

func (c *logRecorderClient) PutLog(ctx context.Context, opts ...grpc.CallOption) (LogRecorder_PutLogClient, error) {
	stream, err := c.cc.NewStream(ctx, &LogRecorder_ServiceDesc.Streams[0], "/log.LogRecorder/PutLog", opts...)
	if err != nil {
		return nil, err
	}
	x := &logRecorderPutLogClient{stream}
	return x, nil
}

type LogRecorder_PutLogClient interface {
	Send(*Log) error
	CloseAndRecv() (*RecorderPutResponse, error)
	grpc.ClientStream
}

type logRecorderPutLogClient struct {
	grpc.ClientStream
}

func (x *logRecorderPutLogClient) Send(m *Log) error {
	return x.ClientStream.SendMsg(m)
}

func (x *logRecorderPutLogClient) CloseAndRecv() (*RecorderPutResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(RecorderPutResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *logRecorderClient) ListLogs(ctx context.Context, in *ListLogRequest, opts ...grpc.CallOption) (LogRecorder_ListLogsClient, error) {
	stream, err := c.cc.NewStream(ctx, &LogRecorder_ServiceDesc.Streams[1], "/log.LogRecorder/ListLogs", opts...)
	if err != nil {
		return nil, err
	}
	x := &logRecorderListLogsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type LogRecorder_ListLogsClient interface {
	Recv() (*ListLogResponse, error)
	grpc.ClientStream
}

type logRecorderListLogsClient struct {
	grpc.ClientStream
}

func (x *logRecorderListLogsClient) Recv() (*ListLogResponse, error) {
	m := new(ListLogResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *logRecorderClient) DeleteLogs(ctx context.Context, in *ListLogRequest, opts ...grpc.CallOption) (*DeleteLogsResponse, error) {
	out := new(DeleteLogsResponse)
	err := c.cc.Invoke(ctx, "/log.LogRecorder/DeleteLogs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logRecorderClient) AggregatedLogs(ctx context.Context, in *TimeRangeRequest, opts ...grpc.CallOption) (LogRecorder_AggregatedLogsClient, error) {
	stream, err := c.cc.NewStream(ctx, &LogRecorder_ServiceDesc.Streams[2], "/log.LogRecorder/AggregatedLogs", opts...)
	if err != nil {
		return nil, err
	}
	x := &logRecorderAggregatedLogsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type LogRecorder_AggregatedLogsClient interface {
	Recv() (*TimeRangeResponse, error)
	grpc.ClientStream
}

type logRecorderAggregatedLogsClient struct {
	grpc.ClientStream
}

func (x *logRecorderAggregatedLogsClient) Recv() (*TimeRangeResponse, error) {
	m := new(TimeRangeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// LogRecorderServer is the server API for LogRecorder service.
// All implementations must embed UnimplementedLogRecorderServer
// for forward compatibility
type LogRecorderServer interface {
	// PutLog adds received log messages to the corresponding log repository.
	PutLog(LogRecorder_PutLogServer) error
	// ListLogs performs a paginated search query in the log repository.
	ListLogs(*ListLogRequest, LogRecorder_ListLogsServer) error
	// DeleteLogs deletes logs based on a request (cannot be empty)
	DeleteLogs(context.Context, *ListLogRequest) (*DeleteLogsResponse, error)
	// AggregatedLogs performs a query to retrieve log events of the given type, faceted by time range.
	AggregatedLogs(*TimeRangeRequest, LogRecorder_AggregatedLogsServer) error
	mustEmbedUnimplementedLogRecorderServer()
}

// UnimplementedLogRecorderServer must be embedded to have forward compatible implementations.
type UnimplementedLogRecorderServer struct {
}

func (UnimplementedLogRecorderServer) PutLog(LogRecorder_PutLogServer) error {
	return status.Errorf(codes.Unimplemented, "method PutLog not implemented")
}
func (UnimplementedLogRecorderServer) ListLogs(*ListLogRequest, LogRecorder_ListLogsServer) error {
	return status.Errorf(codes.Unimplemented, "method ListLogs not implemented")
}
func (UnimplementedLogRecorderServer) DeleteLogs(context.Context, *ListLogRequest) (*DeleteLogsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteLogs not implemented")
}
func (UnimplementedLogRecorderServer) AggregatedLogs(*TimeRangeRequest, LogRecorder_AggregatedLogsServer) error {
	return status.Errorf(codes.Unimplemented, "method AggregatedLogs not implemented")
}
func (UnimplementedLogRecorderServer) mustEmbedUnimplementedLogRecorderServer() {}

// UnsafeLogRecorderServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LogRecorderServer will
// result in compilation errors.
type UnsafeLogRecorderServer interface {
	mustEmbedUnimplementedLogRecorderServer()
}

func RegisterLogRecorderServer(s grpc.ServiceRegistrar, srv LogRecorderServer) {
	s.RegisterService(&LogRecorder_ServiceDesc, srv)
}

func _LogRecorder_PutLog_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(LogRecorderServer).PutLog(&logRecorderPutLogServer{stream})
}

type LogRecorder_PutLogServer interface {
	SendAndClose(*RecorderPutResponse) error
	Recv() (*Log, error)
	grpc.ServerStream
}

type logRecorderPutLogServer struct {
	grpc.ServerStream
}

func (x *logRecorderPutLogServer) SendAndClose(m *RecorderPutResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *logRecorderPutLogServer) Recv() (*Log, error) {
	m := new(Log)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _LogRecorder_ListLogs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListLogRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(LogRecorderServer).ListLogs(m, &logRecorderListLogsServer{stream})
}

type LogRecorder_ListLogsServer interface {
	Send(*ListLogResponse) error
	grpc.ServerStream
}

type logRecorderListLogsServer struct {
	grpc.ServerStream
}

func (x *logRecorderListLogsServer) Send(m *ListLogResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _LogRecorder_DeleteLogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListLogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogRecorderServer).DeleteLogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/log.LogRecorder/DeleteLogs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogRecorderServer).DeleteLogs(ctx, req.(*ListLogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LogRecorder_AggregatedLogs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TimeRangeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(LogRecorderServer).AggregatedLogs(m, &logRecorderAggregatedLogsServer{stream})
}

type LogRecorder_AggregatedLogsServer interface {
	Send(*TimeRangeResponse) error
	grpc.ServerStream
}

type logRecorderAggregatedLogsServer struct {
	grpc.ServerStream
}

func (x *logRecorderAggregatedLogsServer) Send(m *TimeRangeResponse) error {
	return x.ServerStream.SendMsg(m)
}

// LogRecorder_ServiceDesc is the grpc.ServiceDesc for LogRecorder service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LogRecorder_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "log.LogRecorder",
	HandlerType: (*LogRecorderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DeleteLogs",
			Handler:    _LogRecorder_DeleteLogs_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PutLog",
			Handler:       _LogRecorder_PutLog_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "ListLogs",
			Handler:       _LogRecorder_ListLogs_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "AggregatedLogs",
			Handler:       _LogRecorder_AggregatedLogs_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "cells-log.proto",
}
