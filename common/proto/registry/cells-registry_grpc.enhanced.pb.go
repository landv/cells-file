// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.1.0
// - protoc             (unknown)
// source: cells-registry.proto

package registry

import (
	context "context"
	fmt "fmt"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	metadata "google.golang.org/grpc/metadata"
	status "google.golang.org/grpc/status"
	sync "sync"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

var (
	enhancedRegistryServers     = make(map[string]RegistryEnhancedServer)
	enhancedRegistryServersLock = sync.RWMutex{}
)

type NamedRegistryServer interface {
	RegistryServer
	Name() string
}
type RegistryEnhancedServer map[string]NamedRegistryServer

func (m RegistryEnhancedServer) Start(ctx context.Context, r *Item) (*EmptyResponse, error) {
	md, ok := metadata.FromIncomingContext(ctx)
	if !ok || len(md.Get("targetname")) == 0 {
		return nil, status.Errorf(codes.FailedPrecondition, "method Start should have a context")
	}
	enhancedRegistryServersLock.RLock()
	defer enhancedRegistryServersLock.RUnlock()
	for _, mm := range m {
		if mm.Name() == md.Get("targetname")[0] {
			return mm.Start(ctx, r)
		}
	}
	return nil, status.Errorf(codes.Unimplemented, "method Start not implemented")
}

func (m RegistryEnhancedServer) Stop(ctx context.Context, r *Item) (*EmptyResponse, error) {
	md, ok := metadata.FromIncomingContext(ctx)
	if !ok || len(md.Get("targetname")) == 0 {
		return nil, status.Errorf(codes.FailedPrecondition, "method Stop should have a context")
	}
	enhancedRegistryServersLock.RLock()
	defer enhancedRegistryServersLock.RUnlock()
	for _, mm := range m {
		if mm.Name() == md.Get("targetname")[0] {
			return mm.Stop(ctx, r)
		}
	}
	return nil, status.Errorf(codes.Unimplemented, "method Stop not implemented")
}

func (m RegistryEnhancedServer) Get(ctx context.Context, r *GetRequest) (*GetResponse, error) {
	md, ok := metadata.FromIncomingContext(ctx)
	if !ok || len(md.Get("targetname")) == 0 {
		return nil, status.Errorf(codes.FailedPrecondition, "method Get should have a context")
	}
	enhancedRegistryServersLock.RLock()
	defer enhancedRegistryServersLock.RUnlock()
	for _, mm := range m {
		if mm.Name() == md.Get("targetname")[0] {
			return mm.Get(ctx, r)
		}
	}
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}

func (m RegistryEnhancedServer) Register(ctx context.Context, r *Item) (*EmptyResponse, error) {
	md, ok := metadata.FromIncomingContext(ctx)
	if !ok || len(md.Get("targetname")) == 0 {
		return nil, status.Errorf(codes.FailedPrecondition, "method Register should have a context")
	}
	enhancedRegistryServersLock.RLock()
	defer enhancedRegistryServersLock.RUnlock()
	for _, mm := range m {
		if mm.Name() == md.Get("targetname")[0] {
			return mm.Register(ctx, r)
		}
	}
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}

func (m RegistryEnhancedServer) Deregister(ctx context.Context, r *Item) (*EmptyResponse, error) {
	md, ok := metadata.FromIncomingContext(ctx)
	if !ok || len(md.Get("targetname")) == 0 {
		return nil, status.Errorf(codes.FailedPrecondition, "method Deregister should have a context")
	}
	enhancedRegistryServersLock.RLock()
	defer enhancedRegistryServersLock.RUnlock()
	for _, mm := range m {
		if mm.Name() == md.Get("targetname")[0] {
			return mm.Deregister(ctx, r)
		}
	}
	return nil, status.Errorf(codes.Unimplemented, "method Deregister not implemented")
}

func (m RegistryEnhancedServer) List(ctx context.Context, r *ListRequest) (*ListResponse, error) {
	md, ok := metadata.FromIncomingContext(ctx)
	if !ok || len(md.Get("targetname")) == 0 {
		return nil, status.Errorf(codes.FailedPrecondition, "method List should have a context")
	}
	enhancedRegistryServersLock.RLock()
	defer enhancedRegistryServersLock.RUnlock()
	for _, mm := range m {
		if mm.Name() == md.Get("targetname")[0] {
			return mm.List(ctx, r)
		}
	}
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}

func (m RegistryEnhancedServer) Watch(r *WatchRequest, s Registry_WatchServer) error {
	md, ok := metadata.FromIncomingContext(s.Context())
	if !ok || len(md.Get("targetname")) == 0 {
		return status.Errorf(codes.FailedPrecondition, "method Watch should have a context")
	}
	enhancedRegistryServersLock.RLock()
	defer enhancedRegistryServersLock.RUnlock()
	for _, mm := range m {
		if mm.Name() == md.Get("targetname")[0] {
			return mm.Watch(r, s)
		}
	}
	return status.Errorf(codes.Unimplemented, "method Watch not implemented")
}

func (m RegistryEnhancedServer) NewLocker(s Registry_NewLockerServer) error {
	md, ok := metadata.FromIncomingContext(s.Context())
	if !ok || len(md.Get("targetname")) == 0 {
		return status.Errorf(codes.FailedPrecondition, "method NewLocker should have a context")
	}
	enhancedRegistryServersLock.RLock()
	defer enhancedRegistryServersLock.RUnlock()
	for _, mm := range m {
		if mm.Name() == md.Get("targetname")[0] {
			return mm.NewLocker(s)
		}
	}
	return status.Errorf(codes.Unimplemented, "method NewLocker not implemented")
}
func (m RegistryEnhancedServer) mustEmbedUnimplementedRegistryServer() {}
func RegisterRegistryEnhancedServer(s grpc.ServiceRegistrar, srv NamedRegistryServer) {
	enhancedRegistryServersLock.Lock()
	defer enhancedRegistryServersLock.Unlock()
	addr := fmt.Sprintf("%p", s)
	m, ok := enhancedRegistryServers[addr]
	if !ok {
		m = RegistryEnhancedServer{}
		enhancedRegistryServers[addr] = m
		RegisterRegistryServer(s, m)
	}
	m[srv.Name()] = srv
}
func DeregisterRegistryEnhancedServer(s grpc.ServiceRegistrar, name string) {
	enhancedRegistryServersLock.Lock()
	defer enhancedRegistryServersLock.Unlock()
	addr := fmt.Sprintf("%p", s)
	m, ok := enhancedRegistryServers[addr]
	if !ok {
		return
	}
	delete(m, name)
}
