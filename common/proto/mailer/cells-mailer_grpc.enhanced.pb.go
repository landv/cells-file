// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.1.0
// - protoc             v3.18.1
// source: cells-mailer.proto

package mailer

import (
	context "context"
	fmt "fmt"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	metadata "google.golang.org/grpc/metadata"
	status "google.golang.org/grpc/status"
	sync "sync"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

var (
	enhancedMailerServiceServers     = make(map[string]MailerServiceEnhancedServer)
	enhancedMailerServiceServersLock = sync.RWMutex{}
)

type NamedMailerServiceServer interface {
	MailerServiceServer
	Name() string
}
type MailerServiceEnhancedServer map[string]NamedMailerServiceServer

func (m MailerServiceEnhancedServer) SendMail(ctx context.Context, r *SendMailRequest) (*SendMailResponse, error) {
	md, ok := metadata.FromIncomingContext(ctx)
	if !ok || len(md.Get("targetname")) == 0 {
		return nil, status.Errorf(codes.FailedPrecondition, "method SendMail should have a context")
	}
	enhancedMailerServiceServersLock.RLock()
	defer enhancedMailerServiceServersLock.RUnlock()
	for _, mm := range m {
		if mm.Name() == md.Get("targetname")[0] {
			return mm.SendMail(ctx, r)
		}
	}
	return nil, status.Errorf(codes.Unimplemented, "method SendMail not implemented")
}

func (m MailerServiceEnhancedServer) ConsumeQueue(ctx context.Context, r *ConsumeQueueRequest) (*ConsumeQueueResponse, error) {
	md, ok := metadata.FromIncomingContext(ctx)
	if !ok || len(md.Get("targetname")) == 0 {
		return nil, status.Errorf(codes.FailedPrecondition, "method ConsumeQueue should have a context")
	}
	enhancedMailerServiceServersLock.RLock()
	defer enhancedMailerServiceServersLock.RUnlock()
	for _, mm := range m {
		if mm.Name() == md.Get("targetname")[0] {
			return mm.ConsumeQueue(ctx, r)
		}
	}
	return nil, status.Errorf(codes.Unimplemented, "method ConsumeQueue not implemented")
}
func (m MailerServiceEnhancedServer) mustEmbedUnimplementedMailerServiceServer() {}
func RegisterMailerServiceEnhancedServer(s grpc.ServiceRegistrar, srv NamedMailerServiceServer) {
	enhancedMailerServiceServersLock.Lock()
	defer enhancedMailerServiceServersLock.Unlock()
	addr := fmt.Sprintf("%p", s)
	m, ok := enhancedMailerServiceServers[addr]
	if !ok {
		m = MailerServiceEnhancedServer{}
		enhancedMailerServiceServers[addr] = m
		RegisterMailerServiceServer(s, m)
	}
	m[srv.Name()] = srv
}
func DeregisterMailerServiceEnhancedServer(s grpc.ServiceRegistrar, name string) {
	enhancedMailerServiceServersLock.Lock()
	defer enhancedMailerServiceServersLock.Unlock()
	addr := fmt.Sprintf("%p", s)
	m, ok := enhancedMailerServiceServers[addr]
	if !ok {
		return
	}
	delete(m, name)
}
