// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package storage

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// StorageEndpointClient is the client API for StorageEndpoint service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StorageEndpointClient interface {
	Propose(ctx context.Context, in *ProposeRequest, opts ...grpc.CallOption) (*ProposeResponse, error)
	Lookup(ctx context.Context, in *LookupRequest, opts ...grpc.CallOption) (*LookupResponse, error)
}

type storageEndpointClient struct {
	cc grpc.ClientConnInterface
}

func NewStorageEndpointClient(cc grpc.ClientConnInterface) StorageEndpointClient {
	return &storageEndpointClient{cc}
}

func (c *storageEndpointClient) Propose(ctx context.Context, in *ProposeRequest, opts ...grpc.CallOption) (*ProposeResponse, error) {
	out := new(ProposeResponse)
	err := c.cc.Invoke(ctx, "/storage.StorageEndpoint/Propose", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageEndpointClient) Lookup(ctx context.Context, in *LookupRequest, opts ...grpc.CallOption) (*LookupResponse, error) {
	out := new(LookupResponse)
	err := c.cc.Invoke(ctx, "/storage.StorageEndpoint/Lookup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StorageEndpointServer is the server API for StorageEndpoint service.
// All implementations must embed UnimplementedStorageEndpointServer
// for forward compatibility
type StorageEndpointServer interface {
	Propose(context.Context, *ProposeRequest) (*ProposeResponse, error)
	Lookup(context.Context, *LookupRequest) (*LookupResponse, error)
	mustEmbedUnimplementedStorageEndpointServer()
}

// UnimplementedStorageEndpointServer must be embedded to have forward compatible implementations.
type UnimplementedStorageEndpointServer struct {
}

func (UnimplementedStorageEndpointServer) Propose(context.Context, *ProposeRequest) (*ProposeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Propose not implemented")
}
func (UnimplementedStorageEndpointServer) Lookup(context.Context, *LookupRequest) (*LookupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Lookup not implemented")
}
func (UnimplementedStorageEndpointServer) mustEmbedUnimplementedStorageEndpointServer() {}

// UnsafeStorageEndpointServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StorageEndpointServer will
// result in compilation errors.
type UnsafeStorageEndpointServer interface {
	mustEmbedUnimplementedStorageEndpointServer()
}

func RegisterStorageEndpointServer(s grpc.ServiceRegistrar, srv StorageEndpointServer) {
	s.RegisterService(&StorageEndpoint_ServiceDesc, srv)
}

func _StorageEndpoint_Propose_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProposeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageEndpointServer).Propose(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/storage.StorageEndpoint/Propose",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageEndpointServer).Propose(ctx, req.(*ProposeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageEndpoint_Lookup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LookupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageEndpointServer).Lookup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/storage.StorageEndpoint/Lookup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageEndpointServer).Lookup(ctx, req.(*LookupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// StorageEndpoint_ServiceDesc is the grpc.ServiceDesc for StorageEndpoint service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StorageEndpoint_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "storage.StorageEndpoint",
	HandlerType: (*StorageEndpointServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Propose",
			Handler:    _StorageEndpoint_Propose_Handler,
		},
		{
			MethodName: "Lookup",
			Handler:    _StorageEndpoint_Lookup_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cells-storage.proto",
}
